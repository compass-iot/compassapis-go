// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: compass/harvest/v1alpha1/ingest.proto

package harvestpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IngestServiceClient is the client API for IngestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngestServiceClient interface {
	Insert(ctx context.Context, in *PositionEvent, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BatchInsert(ctx context.Context, in *BatchInsertRequest, opts ...grpc.CallOption) (*BatchInsertResponse, error)
}

type ingestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestServiceClient(cc grpc.ClientConnInterface) IngestServiceClient {
	return &ingestServiceClient{cc}
}

func (c *ingestServiceClient) Insert(ctx context.Context, in *PositionEvent, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/compass.harvest.v1alpha1.IngestService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ingestServiceClient) BatchInsert(ctx context.Context, in *BatchInsertRequest, opts ...grpc.CallOption) (*BatchInsertResponse, error) {
	out := new(BatchInsertResponse)
	err := c.cc.Invoke(ctx, "/compass.harvest.v1alpha1.IngestService/BatchInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngestServiceServer is the server API for IngestService service.
// All implementations must embed UnimplementedIngestServiceServer
// for forward compatibility
type IngestServiceServer interface {
	Insert(context.Context, *PositionEvent) (*emptypb.Empty, error)
	BatchInsert(context.Context, *BatchInsertRequest) (*BatchInsertResponse, error)
	mustEmbedUnimplementedIngestServiceServer()
}

// UnimplementedIngestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIngestServiceServer struct {
}

func (UnimplementedIngestServiceServer) Insert(context.Context, *PositionEvent) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedIngestServiceServer) BatchInsert(context.Context, *BatchInsertRequest) (*BatchInsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchInsert not implemented")
}
func (UnimplementedIngestServiceServer) mustEmbedUnimplementedIngestServiceServer() {}

// UnsafeIngestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestServiceServer will
// result in compilation errors.
type UnsafeIngestServiceServer interface {
	mustEmbedUnimplementedIngestServiceServer()
}

func RegisterIngestServiceServer(s grpc.ServiceRegistrar, srv IngestServiceServer) {
	s.RegisterService(&IngestService_ServiceDesc, srv)
}

func _IngestService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compass.harvest.v1alpha1.IngestService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestServiceServer).Insert(ctx, req.(*PositionEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _IngestService_BatchInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchInsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngestServiceServer).BatchInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compass.harvest.v1alpha1.IngestService/BatchInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngestServiceServer).BatchInsert(ctx, req.(*BatchInsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IngestService_ServiceDesc is the grpc.ServiceDesc for IngestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "compass.harvest.v1alpha1.IngestService",
	HandlerType: (*IngestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _IngestService_Insert_Handler,
		},
		{
			MethodName: "BatchInsert",
			Handler:    _IngestService_BatchInsert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "compass/harvest/v1alpha1/ingest.proto",
}
