// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.5
// source: compass/harvest/v1alpha1/ingest.proto

package harvestpb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	_ "v2.compass.iot/genproto/compassapis/compass/iam"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// Batch request for sending multiple events in a single call
// please don't go crazy on the message size !
type BatchInsertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events []*PositionEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *BatchInsertRequest) Reset() {
	*x = BatchInsertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compass_harvest_v1alpha1_ingest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInsertRequest) ProtoMessage() {}

func (x *BatchInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_compass_harvest_v1alpha1_ingest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInsertRequest.ProtoReflect.Descriptor instead.
func (*BatchInsertRequest) Descriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_ingest_proto_rawDescGZIP(), []int{0}
}

func (x *BatchInsertRequest) GetEvents() []*PositionEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

//*
// List of errors ordered according to the BatchInsertRequest
type BatchInsertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*InsertError `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *BatchInsertResponse) Reset() {
	*x = BatchInsertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compass_harvest_v1alpha1_ingest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInsertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInsertResponse) ProtoMessage() {}

func (x *BatchInsertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_compass_harvest_v1alpha1_ingest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInsertResponse.ProtoReflect.Descriptor instead.
func (*BatchInsertResponse) Descriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_ingest_proto_rawDescGZIP(), []int{1}
}

func (x *BatchInsertResponse) GetErrors() []*InsertError {
	if x != nil {
		return x.Errors
	}
	return nil
}

//
// e.g. if BatchInsertRequest.events[2] contains an error
// BatchInsertResponse.errors.index = 2 should contain the relevant message
type InsertError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int32          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InsertError) Reset() {
	*x = InsertError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compass_harvest_v1alpha1_ingest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertError) ProtoMessage() {}

func (x *InsertError) ProtoReflect() protoreflect.Message {
	mi := &file_compass_harvest_v1alpha1_ingest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertError.ProtoReflect.Descriptor instead.
func (*InsertError) Descriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_ingest_proto_rawDescGZIP(), []int{2}
}

func (x *InsertError) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *InsertError) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_compass_harvest_v1alpha1_ingest_proto protoreflect.FileDescriptor

var file_compass_harvest_v1alpha1_ingest_proto_rawDesc = []byte{
	0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73,
	0x2e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x69,
	0x61, 0x6d, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x68, 0x61, 0x72,
	0x76, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x55, 0x0a, 0x12, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x13, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76, 0x65,
	0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22,
	0x4d, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xc0,
	0x02, 0x0a, 0x0d, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x82, 0x01, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x37, 0x82, 0xb5,
	0x18, 0x18, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x22, 0x10, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xa9, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3d, 0x82, 0xb5, 0x18, 0x18, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73,
	0x73, 0x2e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x3a, 0x01,
	0x2a, 0x42, 0x48, 0x5a, 0x46, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x69, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x73, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73,
	0x2f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x3b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_compass_harvest_v1alpha1_ingest_proto_rawDescOnce sync.Once
	file_compass_harvest_v1alpha1_ingest_proto_rawDescData = file_compass_harvest_v1alpha1_ingest_proto_rawDesc
)

func file_compass_harvest_v1alpha1_ingest_proto_rawDescGZIP() []byte {
	file_compass_harvest_v1alpha1_ingest_proto_rawDescOnce.Do(func() {
		file_compass_harvest_v1alpha1_ingest_proto_rawDescData = protoimpl.X.CompressGZIP(file_compass_harvest_v1alpha1_ingest_proto_rawDescData)
	})
	return file_compass_harvest_v1alpha1_ingest_proto_rawDescData
}

var file_compass_harvest_v1alpha1_ingest_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_compass_harvest_v1alpha1_ingest_proto_goTypes = []interface{}{
	(*BatchInsertRequest)(nil),  // 0: compass.harvest.v1alpha1.BatchInsertRequest
	(*BatchInsertResponse)(nil), // 1: compass.harvest.v1alpha1.BatchInsertResponse
	(*InsertError)(nil),         // 2: compass.harvest.v1alpha1.InsertError
	(*PositionEvent)(nil),       // 3: compass.harvest.v1alpha1.PositionEvent
	(*status.Status)(nil),       // 4: google.rpc.Status
	(*emptypb.Empty)(nil),       // 5: google.protobuf.Empty
}
var file_compass_harvest_v1alpha1_ingest_proto_depIdxs = []int32{
	3, // 0: compass.harvest.v1alpha1.BatchInsertRequest.events:type_name -> compass.harvest.v1alpha1.PositionEvent
	2, // 1: compass.harvest.v1alpha1.BatchInsertResponse.errors:type_name -> compass.harvest.v1alpha1.InsertError
	4, // 2: compass.harvest.v1alpha1.InsertError.error:type_name -> google.rpc.Status
	3, // 3: compass.harvest.v1alpha1.IngestService.Insert:input_type -> compass.harvest.v1alpha1.PositionEvent
	0, // 4: compass.harvest.v1alpha1.IngestService.BatchInsert:input_type -> compass.harvest.v1alpha1.BatchInsertRequest
	5, // 5: compass.harvest.v1alpha1.IngestService.Insert:output_type -> google.protobuf.Empty
	1, // 6: compass.harvest.v1alpha1.IngestService.BatchInsert:output_type -> compass.harvest.v1alpha1.BatchInsertResponse
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_compass_harvest_v1alpha1_ingest_proto_init() }
func file_compass_harvest_v1alpha1_ingest_proto_init() {
	if File_compass_harvest_v1alpha1_ingest_proto != nil {
		return
	}
	file_compass_harvest_v1alpha1_position_event_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_compass_harvest_v1alpha1_ingest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInsertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compass_harvest_v1alpha1_ingest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInsertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compass_harvest_v1alpha1_ingest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compass_harvest_v1alpha1_ingest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_compass_harvest_v1alpha1_ingest_proto_goTypes,
		DependencyIndexes: file_compass_harvest_v1alpha1_ingest_proto_depIdxs,
		MessageInfos:      file_compass_harvest_v1alpha1_ingest_proto_msgTypes,
	}.Build()
	File_compass_harvest_v1alpha1_ingest_proto = out.File
	file_compass_harvest_v1alpha1_ingest_proto_rawDesc = nil
	file_compass_harvest_v1alpha1_ingest_proto_goTypes = nil
	file_compass_harvest_v1alpha1_ingest_proto_depIdxs = nil
}
