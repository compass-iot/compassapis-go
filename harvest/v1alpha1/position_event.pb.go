// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.5
// source: compass/harvest/v1alpha1/position_event.proto

package harvestpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	geo "v2.compass.iot/genproto/compassapis/compass/type/geo"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransportType int32

const (
	TransportType_TRANSPORT_TYPE_UNSPECIFIED TransportType = 0
	TransportType_PRIVATE                    TransportType = 1 // Anything not public
	TransportType_PUBLIC                     TransportType = 2 // Vehicle operated by public services
)

// Enum value maps for TransportType.
var (
	TransportType_name = map[int32]string{
		0: "TRANSPORT_TYPE_UNSPECIFIED",
		1: "PRIVATE",
		2: "PUBLIC",
	}
	TransportType_value = map[string]int32{
		"TRANSPORT_TYPE_UNSPECIFIED": 0,
		"PRIVATE":                    1,
		"PUBLIC":                     2,
	}
)

func (x TransportType) Enum() *TransportType {
	p := new(TransportType)
	*p = x
	return p
}

func (x TransportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportType) Descriptor() protoreflect.EnumDescriptor {
	return file_compass_harvest_v1alpha1_position_event_proto_enumTypes[0].Descriptor()
}

func (TransportType) Type() protoreflect.EnumType {
	return &file_compass_harvest_v1alpha1_position_event_proto_enumTypes[0]
}

func (x TransportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportType.Descriptor instead.
func (TransportType) EnumDescriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_position_event_proto_rawDescGZIP(), []int{0}
}

type VehicleType int32

const (
	VehicleType_VEHICLE_TYPE_UNSPECIFIED VehicleType = 0
	VehicleType_BUS                      VehicleType = 1
	VehicleType_CAR                      VehicleType = 2
	VehicleType_VAN                      VehicleType = 3
	VehicleType_TRUCK                    VehicleType = 4
)

// Enum value maps for VehicleType.
var (
	VehicleType_name = map[int32]string{
		0: "VEHICLE_TYPE_UNSPECIFIED",
		1: "BUS",
		2: "CAR",
		3: "VAN",
		4: "TRUCK",
	}
	VehicleType_value = map[string]int32{
		"VEHICLE_TYPE_UNSPECIFIED": 0,
		"BUS":                      1,
		"CAR":                      2,
		"VAN":                      3,
		"TRUCK":                    4,
	}
)

func (x VehicleType) Enum() *VehicleType {
	p := new(VehicleType)
	*p = x
	return p
}

func (x VehicleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VehicleType) Descriptor() protoreflect.EnumDescriptor {
	return file_compass_harvest_v1alpha1_position_event_proto_enumTypes[1].Descriptor()
}

func (VehicleType) Type() protoreflect.EnumType {
	return &file_compass_harvest_v1alpha1_position_event_proto_enumTypes[1]
}

func (x VehicleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VehicleType.Descriptor instead.
func (VehicleType) EnumDescriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_position_event_proto_rawDescGZIP(), []int{1}
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latlng  *geo.LatLng `protobuf:"bytes,1,opt,name=latlng,proto3" json:"latlng,omitempty"`     // lat and lng of the vehicle position
	Speed   float64     `protobuf:"fixed64,2,opt,name=speed,proto3" json:"speed,omitempty"`     // speed of vehicle in km/h
	Bearing float64     `protobuf:"fixed64,3,opt,name=bearing,proto3" json:"bearing,omitempty"` // [optional] bearing of vehicle in degrees [0, 360)
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compass_harvest_v1alpha1_position_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_compass_harvest_v1alpha1_position_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_position_event_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetLatlng() *geo.LatLng {
	if x != nil {
		return x.Latlng
	}
	return nil
}

func (x *Position) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *Position) GetBearing() float64 {
	if x != nil {
		return x.Bearing
	}
	return 0
}

//*
// Acceleration is measured in gforce
// so if the vehicle is accelerating at 9.8m/s^2 (newtons) in the x axis,
// the input to this api should be Acceleration { 1, 0, 0 }
// if it is decelerating at 1m/s^2, the input to this api should be { -0.102, 0, 0 } (0.102 ~= 1/9.8)
// if this is confusing, don't worry to hard about getting it correct, we can apply provider specific unit conversions post ingestion, just be consistent and let us know
// Note that the vertical axis in the diagram is the z axis, not the y axis
// Also note the + and - signs in the diagram which direction should be positive and negative within each axis
//
// ![alt text](https://storage.googleapis.com/compass-public-docs/static/acc_gyro.png)
type Acceleration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"` // acceleration / braking
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"` // side to side / turning force
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"` // vertical up / down force
}

func (x *Acceleration) Reset() {
	*x = Acceleration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compass_harvest_v1alpha1_position_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Acceleration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Acceleration) ProtoMessage() {}

func (x *Acceleration) ProtoReflect() protoreflect.Message {
	mi := &file_compass_harvest_v1alpha1_position_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Acceleration.ProtoReflect.Descriptor instead.
func (*Acceleration) Descriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_position_event_proto_rawDescGZIP(), []int{1}
}

func (x *Acceleration) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Acceleration) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Acceleration) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

//*
// Rotational data is measured in degrees per second
// A positive value for roll, pitch or yaw is defined in the anti-clockwise direction when facing the positive direction of it's axis
//
// See acceleration diagram for more details
type Gyro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roll  float64 `protobuf:"fixed64,1,opt,name=roll,proto3" json:"roll,omitempty"`
	Pitch float64 `protobuf:"fixed64,2,opt,name=pitch,proto3" json:"pitch,omitempty"`
	Yaw   float64 `protobuf:"fixed64,3,opt,name=yaw,proto3" json:"yaw,omitempty"`
}

func (x *Gyro) Reset() {
	*x = Gyro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compass_harvest_v1alpha1_position_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gyro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gyro) ProtoMessage() {}

func (x *Gyro) ProtoReflect() protoreflect.Message {
	mi := &file_compass_harvest_v1alpha1_position_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gyro.ProtoReflect.Descriptor instead.
func (*Gyro) Descriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_position_event_proto_rawDescGZIP(), []int{2}
}

func (x *Gyro) GetRoll() float64 {
	if x != nil {
		return x.Roll
	}
	return 0
}

func (x *Gyro) GetPitch() float64 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

func (x *Gyro) GetYaw() float64 {
	if x != nil {
		return x.Yaw
	}
	return 0
}

//*
// - Either VehicleID or TripID MUST be present.
// - Ideally both, followed by just VehicleID, followed by just TripID.
// - Position, VehicleType and TransportType are required
// - Any extra metadata can be added in 'labels' and will be greatly appreciated!
type PositionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleId     string                 `protobuf:"bytes,1,opt,name=vehicle_id,json=vehicleId,proto3" json:"vehicle_id,omitempty"` // Unique identifier for the vehicle. device_id is a sufficiently good proxy for this field
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                  // Timestamp that event occured
	TransportType TransportType          `protobuf:"varint,3,opt,name=transport_type,json=transportType,proto3,enum=compass.harvest.v1alpha1.TransportType" json:"transport_type,omitempty"`
	VehicleType   VehicleType            `protobuf:"varint,4,opt,name=vehicle_type,json=vehicleType,proto3,enum=compass.harvest.v1alpha1.VehicleType" json:"vehicle_type,omitempty"`
	Position      *Position              `protobuf:"bytes,5,opt,name=position,proto3" json:"position,omitempty"`
	Acceleration  *Acceleration          `protobuf:"bytes,7,opt,name=acceleration,proto3" json:"acceleration,omitempty"`
	Gyro          *Gyro                  `protobuf:"bytes,8,opt,name=gyro,proto3" json:"gyro,omitempty"`
	TripId        string                 `protobuf:"bytes,9,opt,name=trip_id,json=tripId,proto3" json:"trip_id,omitempty"` // Id linking points of the same trip
	Provider      string                 `protobuf:"bytes,10,opt,name=provider,proto3" json:"provider,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // extra metadata not suppported by our api that may be useful :)
}

func (x *PositionEvent) Reset() {
	*x = PositionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compass_harvest_v1alpha1_position_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionEvent) ProtoMessage() {}

func (x *PositionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_compass_harvest_v1alpha1_position_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionEvent.ProtoReflect.Descriptor instead.
func (*PositionEvent) Descriptor() ([]byte, []int) {
	return file_compass_harvest_v1alpha1_position_event_proto_rawDescGZIP(), []int{3}
}

func (x *PositionEvent) GetVehicleId() string {
	if x != nil {
		return x.VehicleId
	}
	return ""
}

func (x *PositionEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PositionEvent) GetTransportType() TransportType {
	if x != nil {
		return x.TransportType
	}
	return TransportType_TRANSPORT_TYPE_UNSPECIFIED
}

func (x *PositionEvent) GetVehicleType() VehicleType {
	if x != nil {
		return x.VehicleType
	}
	return VehicleType_VEHICLE_TYPE_UNSPECIFIED
}

func (x *PositionEvent) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *PositionEvent) GetAcceleration() *Acceleration {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

func (x *PositionEvent) GetGyro() *Gyro {
	if x != nil {
		return x.Gyro
	}
	return nil
}

func (x *PositionEvent) GetTripId() string {
	if x != nil {
		return x.TripId
	}
	return ""
}

func (x *PositionEvent) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *PositionEvent) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_compass_harvest_v1alpha1_position_event_proto protoreflect.FileDescriptor

var file_compass_harvest_v1alpha1_position_event_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73,
	0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x73, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x67, 0x65, 0x6f, 0x2f, 0x67, 0x65, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x67, 0x65, 0x6f, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x06, 0x6c, 0x61,
	0x74, 0x6c, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x38, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x42,
	0x0a, 0x04, 0x47, 0x79, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x69,
	0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x10, 0x0a, 0x03, 0x79, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x79,
	0x61, 0x77, 0x22, 0xff, 0x04, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4e, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a,
	0x0c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61,
	0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x67, 0x79, 0x72, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x79, 0x72,
	0x6f, 0x52, 0x04, 0x67, 0x79, 0x72, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x72, 0x69, 0x70, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x2a, 0x48, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x2a, 0x51,
	0x0a, 0x0b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x55, 0x53, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x56, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x55, 0x43, 0x4b, 0x10,
	0x04, 0x42, 0x48, 0x5a, 0x46, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x2e,
	0x69, 0x6f, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x73, 0x73, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73,
	0x2f, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x3b, 0x68, 0x61, 0x72, 0x76, 0x65, 0x73, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_compass_harvest_v1alpha1_position_event_proto_rawDescOnce sync.Once
	file_compass_harvest_v1alpha1_position_event_proto_rawDescData = file_compass_harvest_v1alpha1_position_event_proto_rawDesc
)

func file_compass_harvest_v1alpha1_position_event_proto_rawDescGZIP() []byte {
	file_compass_harvest_v1alpha1_position_event_proto_rawDescOnce.Do(func() {
		file_compass_harvest_v1alpha1_position_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_compass_harvest_v1alpha1_position_event_proto_rawDescData)
	})
	return file_compass_harvest_v1alpha1_position_event_proto_rawDescData
}

var file_compass_harvest_v1alpha1_position_event_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_compass_harvest_v1alpha1_position_event_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_compass_harvest_v1alpha1_position_event_proto_goTypes = []interface{}{
	(TransportType)(0),            // 0: compass.harvest.v1alpha1.TransportType
	(VehicleType)(0),              // 1: compass.harvest.v1alpha1.VehicleType
	(*Position)(nil),              // 2: compass.harvest.v1alpha1.Position
	(*Acceleration)(nil),          // 3: compass.harvest.v1alpha1.Acceleration
	(*Gyro)(nil),                  // 4: compass.harvest.v1alpha1.Gyro
	(*PositionEvent)(nil),         // 5: compass.harvest.v1alpha1.PositionEvent
	nil,                           // 6: compass.harvest.v1alpha1.PositionEvent.LabelsEntry
	(*geo.LatLng)(nil),            // 7: compass.type.geo.LatLng
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
}
var file_compass_harvest_v1alpha1_position_event_proto_depIdxs = []int32{
	7, // 0: compass.harvest.v1alpha1.Position.latlng:type_name -> compass.type.geo.LatLng
	8, // 1: compass.harvest.v1alpha1.PositionEvent.timestamp:type_name -> google.protobuf.Timestamp
	0, // 2: compass.harvest.v1alpha1.PositionEvent.transport_type:type_name -> compass.harvest.v1alpha1.TransportType
	1, // 3: compass.harvest.v1alpha1.PositionEvent.vehicle_type:type_name -> compass.harvest.v1alpha1.VehicleType
	2, // 4: compass.harvest.v1alpha1.PositionEvent.position:type_name -> compass.harvest.v1alpha1.Position
	3, // 5: compass.harvest.v1alpha1.PositionEvent.acceleration:type_name -> compass.harvest.v1alpha1.Acceleration
	4, // 6: compass.harvest.v1alpha1.PositionEvent.gyro:type_name -> compass.harvest.v1alpha1.Gyro
	6, // 7: compass.harvest.v1alpha1.PositionEvent.labels:type_name -> compass.harvest.v1alpha1.PositionEvent.LabelsEntry
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_compass_harvest_v1alpha1_position_event_proto_init() }
func file_compass_harvest_v1alpha1_position_event_proto_init() {
	if File_compass_harvest_v1alpha1_position_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_compass_harvest_v1alpha1_position_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compass_harvest_v1alpha1_position_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Acceleration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compass_harvest_v1alpha1_position_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gyro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compass_harvest_v1alpha1_position_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compass_harvest_v1alpha1_position_event_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_compass_harvest_v1alpha1_position_event_proto_goTypes,
		DependencyIndexes: file_compass_harvest_v1alpha1_position_event_proto_depIdxs,
		EnumInfos:         file_compass_harvest_v1alpha1_position_event_proto_enumTypes,
		MessageInfos:      file_compass_harvest_v1alpha1_position_event_proto_msgTypes,
	}.Build()
	File_compass_harvest_v1alpha1_position_event_proto = out.File
	file_compass_harvest_v1alpha1_position_event_proto_rawDesc = nil
	file_compass_harvest_v1alpha1_position_event_proto_goTypes = nil
	file_compass_harvest_v1alpha1_position_event_proto_depIdxs = nil
}
